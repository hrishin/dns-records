name: Build and Publish Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    # No inputs needed - just manual trigger

env:
  REGISTRY: docker.io
  IMAGE_NAME: hriships/dns-record

jobs:
  # Integration tests job that runs before publishing
  integration-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dnsutils

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install sops and age
        run: |
          # Install sops
          echo "Installing sops..."
          curl -L -o sops "https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux.amd64"
          chmod +x sops
          sudo mv sops /usr/local/bin/
          
          # Install age
          echo "Installing age..."
          curl -L -o age.tar.gz "https://github.com/FiloSottile/age/releases/download/v1.2.0/age-v1.2.0-linux-amd64.tar.gz"
          echo "Downloaded file size: $(stat -c%s age.tar.gz) bytes"
          file age.tar.gz
          tar -xzf age.tar.gz
          sudo mv age/age /usr/local/bin/
          rm -rf age age.tar.gz
          
          echo "Installed versions:"
          sops --version
          age --version

      - name: Setup AGE key and decrypt secrets
        run: |
          echo "${{ secrets.AGE_KEY }}" > .age-key
          chmod 600 .age-key
          export SOPS_AGE_KEY_FILE=.age-key
          
          chmod +x scripts/decrypt-update-key.sh
          ./scripts/decrypt-update-key.sh
          
          # Clean up the AGE key
          rm -f .age-key

      - name: Verify decrypted files
        run: |
          echo "Checking decrypted files..."
          if [ -f "bind/update-key.conf" ]; then
            echo "update-key.conf is available"
            ls -la bind/update-key.conf
          fi

      - name: Run integration tests
        run: |
          make test-integration

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-reports
          path: test_reports/
          retention-days: 30

  # Build and publish job
  build:
    runs-on: ubuntu-latest
    needs: integration-tests
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install sops and age
        run: |
          # Install sops
          echo "Installing sops..."
          curl -L -o sops "https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux.amd64"
          chmod +x sops
          sudo mv sops /usr/local/bin/
          
          # Install age
          echo "Installing age..."
          curl -L -o age.tar.gz "https://github.com/FiloSottile/age/releases/download/v1.2.0/age-v1.2.0-linux-amd64.tar.gz"
          echo "Downloaded file size: $(stat -c%s age.tar.gz) bytes"
          file age.tar.gz
          tar -xzf age.tar.gz
          sudo mv age/age /usr/local/bin/
          rm -rf age age.tar.gz
          
          echo "Installed versions:"
          sops --version
          age --version

      - name: Setup AGE key and decrypt secrets
        run: |
          echo "${{ secrets.AGE_KEY }}" > .age-key
          chmod 600 .age-key
          export SOPS_AGE_KEY_FILE=.age-key
          
          chmod +x scripts/decrypt-update-key.sh
          ./scripts/decrypt-update-key.sh
          
          # Clean up the AGE key
          rm -f .age-key

      - name: Verify decrypted files
        run: |
          echo "Checking decrypted files..."
          if [ -f "bind/update-key.conf" ]; then
            echo "update-key.conf is available"
            ls -la bind/update-key.conf
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.bind
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build status
        run: |
          echo "Docker image built and published successfully!"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
